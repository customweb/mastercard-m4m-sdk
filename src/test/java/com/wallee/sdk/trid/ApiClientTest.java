package com.wallee.sdk.trid;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Optional;

import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

import com.wallee.sdk.trid.ApiClient.ApiClientConfiguration;
import com.wallee.sdk.trid.api.BatchRequestTokenRequestorsApi;
import com.wallee.sdk.trid.model.RequestTokenRequestorErrorSchema;
import com.wallee.sdk.trid.model.RequestTokenRequestorRequestSchema;
import com.wallee.sdk.trid.model.RequestTokenRequestorResponseSchema;
import com.wallee.sdk.trid.model.TokenRequestorAssignmentErrors;
import com.wallee.sdk.trid.model.TokenRequestorsArrayRequest;

// Testing sample copied from: https://developer.mastercard.com/token-requestor-identifier-api/documentation/tutorials-and-guides/testing-guide/
public class ApiClientTest {

    private static String signingKeyAlias;
    private static String signingKeyPassword;
    private static String consumerKey;

    private static PrivateKey signingKey;
    private static String encodedBase64SigningKey;
    
    private ApiClient apiClient;

    @BeforeClass
    public static void loadKeys() throws IOException, GeneralSecurityException {

        loadEnviromentVariables();
        
        // signing key  
        byte[] decodeP12 = Base64.getDecoder().decode(encodedBase64SigningKey.getBytes(StandardCharsets.UTF_8));

        signingKey = loadSigningKey(//
                decodeP12, // 
                signingKeyAlias, //
                signingKeyPassword);
    }
    
    private static void loadEnviromentVariables() throws GeneralSecurityException, IOException {
        signingKeyAlias = Optional//
                .ofNullable(System.getenv("TRID_SIGNING_KEY_ALIAS"))//
                .orElseThrow(() -> new NullPointerException("TRID_SIGNING_KEY_ALIAS"));
        
        signingKeyPassword = Optional//
                .ofNullable(System.getenv("TRID_SIGNING_KEY_PASSWORD"))//
                .orElseThrow(() -> new NullPointerException("TRID_SIGNING_KEY_PASSWORD"));
        
        consumerKey = Optional//
                .ofNullable(System.getenv("TRID_CONSUMER_KEY"))//
                .orElseThrow(() -> new NullPointerException("TRID_CONSUMER_KEY"));
        
        
        encodedBase64SigningKey = Optional//
                .ofNullable(System.getenv("TRID_ENCODED_BASE64_SIGNING_KEY"))//
                .orElseThrow(() -> new NullPointerException("TRID_ENCODED_BASE64_SIGNING_KEY"));
    }
    
    /*
     * Overloaded version with input parameter InputStream instead of String (path) of:
     * com.mastercard.developer.utils.EncryptionUtils.loadEncryptionCertificate(String)
     */
    public static Certificate loadEncryptionCertificate(InputStream inStream)
            throws CertificateException, NoSuchProviderException {
        CertificateFactory factory = CertificateFactory.getInstance("X.509", "SUN");
        return factory.generateCertificate(inStream);
    }

    /*
     * Overloaded version with signing-key as byte array parameter instead of String (path) of:
     * com.mastercard.developer.utils.AuthenticationUtils.loadSigningKey(String, String, String)
     */
    public static PrivateKey loadSigningKey(byte[] pkcs12Key, String signingKeyAlias, String signingKeyPassword)
            throws IOException, NoSuchProviderException, KeyStoreException, CertificateException,
            NoSuchAlgorithmException, UnrecoverableKeyException {
        KeyStore pkcs12KeyStore = KeyStore.getInstance("PKCS12", "SunJSSE");

        try (InputStream in = new ByteArrayInputStream(pkcs12Key)) {
            pkcs12KeyStore.load(in, signingKeyPassword.toCharArray());
            return (PrivateKey) pkcs12KeyStore.getKey(signingKeyAlias, signingKeyPassword.toCharArray());
        }
    }

    @Before
    public void initializeApiClient() {
        this.apiClient = buildApiClient();
    }
    
    private static ApiClient buildApiClient() {
        ApiClientConfiguration apiClientConfiguration = ApiClientConfiguration.building()//
                .setEndpoint(ApiClient.EndPoint.SANDBOX)//
                .setSigningKey(signingKey)//
                .setConsumerKey(consumerKey)//
                .build();
        return new ApiClient(apiClientConfiguration);
    }
    
    @Test 
    public void errorInvalidFieldValueTest() throws ApiException {
        RequestTokenRequestorRequestSchema request = errorInvalidFieldValueBuildRequestSchema();
        try {
            sendRequest(request);
            Assert.fail();
        } catch (ApiException exc) {
            errorInvalidFieldValueAssert(exc);
        }
    }

    private RequestTokenRequestorRequestSchema errorInvalidFieldValueBuildRequestSchema() {
        RequestTokenRequestorRequestSchema request = new RequestTokenRequestorRequestSchema();
        request.setRequestId("325568");
        request.setTokenRequestors(new ArrayList<TokenRequestorsArrayRequest>());
        request.getTokenRequestors().add(errorInvalidFieldValueBuildTokenRequestor01());
        request.getTokenRequestors().add(errorInvalidFieldValueBuildTokenRequestor02());
        return request;
    }

    private TokenRequestorsArrayRequest errorInvalidFieldValueBuildTokenRequestor01() {
        TokenRequestorsArrayRequest tor = new TokenRequestorsArrayRequest();
        tor.setEntityId("gggyh27e5A629dA11e3A949aA0800200yyy9ikmm");
        tor.setConsumerFacingEntityName("Merchant1");
        tor.setPaymentAppId("M4MCLOUDDSRP");
        tor.setProvidePaymentAccountReference(false);
        tor.setEnableTransactionIssuerResponseInformation(true);
        tor.setWrappedEncryptionHashAlgorithm("1234");
        tor.setDebitCreditIndicator("BOTH");
        return tor;
    }

    private TokenRequestorsArrayRequest errorInvalidFieldValueBuildTokenRequestor02() {
        TokenRequestorsArrayRequest tor = new TokenRequestorsArrayRequest();
        tor.setEntityId("gggyh27e5A629dA11e3A949aA0800200yyy9ikjj");
        tor.setConsumerFacingEntityName("Merchant2");
        tor.setPaymentAppId("M4MCLOUDDSRP");
        tor.setProvidePaymentAccountReference(false);
        tor.setEnableTransactionIssuerResponseInformation(true);
        tor.setWrappedEncryptionHashAlgorithm("SHA256");
        tor.setDebitCreditIndicator("BOTH");
        return tor;
    }   

    private void errorInvalidFieldValueAssert(ApiException exc) {
        RequestTokenRequestorErrorSchema errorSchema = apiClient.deserializeError(exc);
        assertEquals("325568", errorSchema.getResponseId());
        assertEquals(1, errorSchema.getErrors().size());
        TokenRequestorAssignmentErrors error = errorSchema.getErrors().get(0);
        assertEquals("gggyh27e5A629dA11e3A949aA0800200yyy9ikmm", error.getEntityId());
        assertEquals("INPUT", error.getSource());
        assertEquals("INVALID_FIELD_VALUE", error.getReasonCode());
        assertEquals("Invalid Field Value - wrappedEncryptionHashAlgorithm", error.getDescription());
    }

    @Test 
    public void errorInvalidArraySizeTest() throws ApiException {
        RequestTokenRequestorRequestSchema request = errorInvalidArraySizeBuildRequestSchema();
        try {
            sendRequest(request);
            Assert.fail();
        } catch (ApiException exc) {
            errorInvalidArraySizeAssert(exc);
        }
    }

    private RequestTokenRequestorRequestSchema errorInvalidArraySizeBuildRequestSchema() {
        RequestTokenRequestorRequestSchema request = new RequestTokenRequestorRequestSchema();
        request.setRequestId("347812");
        request.setTokenRequestors(new ArrayList<TokenRequestorsArrayRequest>());
        return request;
    }

    private void errorInvalidArraySizeAssert(ApiException exc) {
        RequestTokenRequestorErrorSchema errorSchema = apiClient.deserializeError(exc);
        assertEquals("347812", errorSchema.getResponseId());
        assertEquals(1, errorSchema.getErrors().size());
        TokenRequestorAssignmentErrors error = errorSchema.getErrors().get(0);
        assertNull(error.getEntityId());
        assertEquals("INPUT", error.getSource());
        assertEquals("INVALID_ARRAY_SIZE", error.getReasonCode());
        assertEquals("The array size is not valid â€“ tokenRequestors", error.getDescription());
    }
    
    @Test 
    public void errorDuplicateFieldValueTest() throws ApiException {
        RequestTokenRequestorRequestSchema request = errorDuplicateFieldValueBuildRequestSchema();
        try {
            sendRequest(request);
            Assert.fail();
        } catch (ApiException exc) {
            errorDuplicateFieldValueAssert(exc);
        }
    }

    private RequestTokenRequestorRequestSchema errorDuplicateFieldValueBuildRequestSchema() {
        RequestTokenRequestorRequestSchema request = new RequestTokenRequestorRequestSchema();
        request.setRequestId("325565");
        request.setTokenRequestors(new ArrayList<TokenRequestorsArrayRequest>());
        request.getTokenRequestors().add(errorDuplicateFieldValueBuildTokenRequestor01());
        request.getTokenRequestors().add(errorDuplicateFieldValueBuildTokenRequestor02());
        return request;
    }

    private TokenRequestorsArrayRequest errorDuplicateFieldValueBuildTokenRequestor01() {
        TokenRequestorsArrayRequest tor = new TokenRequestorsArrayRequest();
        tor.setEntityId("gggyh27e5A629dA11e3A949aA0800200yyy9ikjj");
        tor.setConsumerFacingEntityName("Merchant1");
        tor.setPaymentAppId("M4MCLOUDDSRP");
        tor.setProvidePaymentAccountReference(false);
        tor.setEnableTransactionIssuerResponseInformation(true);
        tor.setWrappedEncryptionHashAlgorithm("SHA256");
        tor.setDebitCreditIndicator("BOTH");
        return tor;
    }

    private TokenRequestorsArrayRequest errorDuplicateFieldValueBuildTokenRequestor02() {
        TokenRequestorsArrayRequest tor = new TokenRequestorsArrayRequest();
        tor.setEntityId("gggyh27e5A629dA11e3A949aA0800200yyy9ikjj");
        tor.setConsumerFacingEntityName("Merchant2");
        tor.setPaymentAppId("M4MCLOUDDSRP");
        tor.setProvidePaymentAccountReference(false);
        tor.setEnableTransactionIssuerResponseInformation(true);
        tor.setWrappedEncryptionHashAlgorithm("SHA256");
        tor.setDebitCreditIndicator("BOTH");
        return tor;
    }   
    
    private void errorDuplicateFieldValueAssert(ApiException exc) {
        RequestTokenRequestorErrorSchema errorSchema = apiClient.deserializeError(exc);
        assertEquals("325565", errorSchema.getResponseId());
        assertEquals(1, errorSchema.getErrors().size());
        TokenRequestorAssignmentErrors error = errorSchema.getErrors().get(0);
        assertEquals("gggyh27e5A629dA11e3A949aA0800200yyy9ikjj", error.getEntityId());
        assertEquals("INPUT", error.getSource());
        assertEquals("DUPLICATE_FIELD_VALUE", error.getReasonCode());
        assertEquals("Duplicate Field Value - entityId", error.getDescription());
    }

    @Test
    @Ignore("failing")
    public void errorInvalidFieldFormatTest() throws ApiException {
        RequestTokenRequestorRequestSchema request = errorInvalidFieldFormatBuildRequestSchema();
        try {
            sendRequest(request);
            Assert.fail();
        } catch (ApiException exc) {
            errorInvalidFieldFormatAssert(exc);
        }
    }
    
    private RequestTokenRequestorRequestSchema errorInvalidFieldFormatBuildRequestSchema() {
        RequestTokenRequestorRequestSchema request = new RequestTokenRequestorRequestSchema();
        request.setRequestId("328565");
        request.setTokenRequestors(new ArrayList<TokenRequestorsArrayRequest>());
        request.getTokenRequestors().add(errorInvalidFieldFormatBuildTokenRequestor01());
        return request;
    }

    private TokenRequestorsArrayRequest errorInvalidFieldFormatBuildTokenRequestor01() {
        TokenRequestorsArrayRequest tor = new TokenRequestorsArrayRequest();
        tor.setEntityId("gggyh27e5A629dA11e3A949aA0800200yyy9ikjj");
        tor.setConsumerFacingEntityName("sample123675");
        tor.setPaymentAppId("M4MCLOUDDSRP");
        tor.setTokenRequestorPngLogo("");
        tor.setTokenRequestorSvgLogo("PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxMi41NCAyMiI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOiNmZjY3MWI7fS5jbHMtMntmaWxsOiM3MjcyNzE7fTwvc3R5bGU+PC9kZWZzPjx0aXRsZT5pY29uX21vYmlsZV9vcm5nX2FwcGxld2F0Y2g8L3RpdGxlPjxnIGlkPSJMYXllcl8yIiBkYXRhLW5hbWU9IkxheWVyIDIiPjxnIGlkPSJPcmFuZ2UiPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTYuMywxMy44MSw1LDEwLjFsLS45LDEuNDRoLTJ2LTFIMy41OUw1LjI4LDcuOWwxLjQ2LDQuMjRMOC4xLDEwLjkxbDIuMzUtLjA3LDAsMS0yLC4wNlpNOS43LDBIMi44NFY1LjUyaDFWMWg1VjUuNjFoMVptMCwxNi4xNGgtMVYyMWgtNXYtNC44aC0xVjIySDkuN1oiLz48cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik0xMC40MiwxNi42MkgyLjEyQTIuMTIsMi4xMiwwLDAsMSwwLDE0LjV2LTdBMi4xMiwyLjEyLDAsMCwxLDIuMTIsNS4zNWg4LjNhMi4xMiwyLjEyLDAsMCwxLDIuMTIsMi4xMnY3QTIuMTIsMi4xMiwwLDAsMSwxMC40MiwxNi42MlpNMi4xMiw2LjMxQTEuMTcsMS4xNywwLDAsMCwxLDcuNDd2N2ExLjE3LDEuMTcsMCwwLDAsMS4xNywxLjE3aDguM2ExLjE3LDEuMTcsMCwwLDAsMS4xNy0xLjE3di03YTEuMTcsMS4xNywwLDAsMC0xLjE3LTEuMTdaIi8+PC9nPjwvZz48L3N2Zz4=");
        tor.setProvidePaymentAccountReference(false);
        tor.setEnableTransactionIssuerResponseInformation(true);
        tor.setWrappedEncryptionHashAlgorithm("SHA256");
        tor.setDebitCreditIndicator("BOTH");
        return tor;
    }
    
    private void errorInvalidFieldFormatAssert(ApiException exc) {
        RequestTokenRequestorErrorSchema errorSchema = apiClient.deserializeError(exc);
        assertEquals("328565", errorSchema.getResponseId());
        assertEquals(1, errorSchema.getErrors().size());
        TokenRequestorAssignmentErrors error = errorSchema.getErrors().get(0);
        assertEquals("gggyh27e5A629dA11e3A949aA0800200yyy9ikjj", error.getEntityId());
        assertEquals("INPUT", error.getSource());
        assertEquals("INVALID_FIELD_FORMAT", error.getReasonCode());
        assertEquals("Invalid Field Format - customerId", error.getDescription());
    }
    
    @Test 
    public void errorInvalidFieldLengthTest() throws ApiException {
        RequestTokenRequestorRequestSchema request = errorInvalidFieldLengthBuildRequestSchema();
        try {
            sendRequest(request);
            Assert.fail();
        } catch (ApiException exc) {
            errorInvalidFieldLengthAssert(exc);
        }
    }
    
    private RequestTokenRequestorRequestSchema errorInvalidFieldLengthBuildRequestSchema() {
        RequestTokenRequestorRequestSchema request = new RequestTokenRequestorRequestSchema();
        request.setRequestId("322575");
        request.setTokenRequestors(new ArrayList<TokenRequestorsArrayRequest>());
        request.getTokenRequestors().add(errorInvalidFieldLengthBuildTokenRequestor01());
        return request;
    }

    private TokenRequestorsArrayRequest errorInvalidFieldLengthBuildTokenRequestor01() {
        TokenRequestorsArrayRequest tor = new TokenRequestorsArrayRequest();
        tor.setEntityId("gggyh27e5A629dA11e3A949aA0800200yyy9ikjj");
        tor.setConsumerFacingEntityName("sample123675");
        tor.setPaymentAppId("M4MCLOUDDSRPhdhdhdhdhdhdhdhdhdh");
        tor.setTokenRequestorPngLogo("");
        tor.setTokenRequestorSvgLogo("PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxMi41NCAyMiI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOiNmZjY3MWI7fS5jbHMtMntmaWxsOiM3MjcyNzE7fTwvc3R5bGU+PC9kZWZzPjx0aXRsZT5pY29uX21vYmlsZV9vcm5nX2FwcGxld2F0Y2g8L3RpdGxlPjxnIGlkPSJMYXllcl8yIiBkYXRhLW5hbWU9IkxheWVyIDIiPjxnIGlkPSJPcmFuZ2UiPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTYuMywxMy44MSw1LDEwLjFsLS45LDEuNDRoLTJ2LTFIMy41OUw1LjI4LDcuOWwxLjQ2LDQuMjRMOC4xLDEwLjkxbDIuMzUtLjA3LDAsMS0yLC4wNlpNOS43LDBIMi44NFY1LjUyaDFWMWg1VjUuNjFoMVptMCwxNi4xNGgtMVYyMWgtNXYtNC44aC0xVjIySDkuN1oiLz48cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik0xMC40MiwxNi42MkgyLjEyQTIuMTIsMi4xMiwwLDAsMSwwLDE0LjV2LTdBMi4xMiwyLjEyLDAsMCwxLDIuMTIsNS4zNWg4LjNhMi4xMiwyLjEyLDAsMCwxLDIuMTIsMi4xMnY3QTIuMTIsMi4xMiwwLDAsMSwxMC40MiwxNi42MlpNMi4xMiw2LjMxQTEuMTcsMS4xNywwLDAsMCwxLDcuNDd2N2ExLjE3LDEuMTcsMCwwLDAsMS4xNywxLjE3aDguM2ExLjE3LDEuMTcsMCwwLDAsMS4xNy0xLjE3di03YTEuMTcsMS4xNywwLDAsMC0xLjE3LTEuMTdaIi8+PC9nPjwvZz48L3N2Zz4=");      
        tor.setProvidePaymentAccountReference(false);
        tor.setEnableTransactionIssuerResponseInformation(true);
        tor.setWrappedEncryptionHashAlgorithm("SHA256");
        tor.setDebitCreditIndicator("BOTH");
        return tor;
    }
    
    private void errorInvalidFieldLengthAssert(ApiException exc) {
        RequestTokenRequestorErrorSchema errorSchema = apiClient.deserializeError(exc);
        assertEquals("322575", errorSchema.getResponseId());
        assertEquals(1, errorSchema.getErrors().size());
        TokenRequestorAssignmentErrors error = errorSchema.getErrors().get(0);
        assertEquals("gggyh27e5A629dA11e3A949aA0800200yyy9ikjj", error.getEntityId());
        assertEquals("INPUT", error.getSource());
        assertEquals("INVALID_FIELD_LENGTH", error.getReasonCode());
        assertEquals("Invalid Field Length - paymentAppId", error.getDescription());
    }

    @Test 
    public void errorMissingRequiredFieldTest() throws ApiException {
        RequestTokenRequestorRequestSchema request = errorMissingRequiredFieldBuildRequestSchema();
        try {
            sendRequest(request);
            Assert.fail();
        } catch (ApiException exc) {
            errorMissingRequiredFieldAssert(exc);
        }
    }
    
    private RequestTokenRequestorRequestSchema errorMissingRequiredFieldBuildRequestSchema() {
        RequestTokenRequestorRequestSchema request = new RequestTokenRequestorRequestSchema();
        request.setRequestId("312565");
        request.setTokenRequestors(new ArrayList<TokenRequestorsArrayRequest>());
        request.getTokenRequestors().add(errorMissingRequiredFieldBuildTokenRequestor01());
        return request;
    }

    private TokenRequestorsArrayRequest errorMissingRequiredFieldBuildTokenRequestor01() {
        TokenRequestorsArrayRequest tor = new TokenRequestorsArrayRequest();
        tor.setEntityId("gggyh27e5A629dA11e3A949aA0800200yyy9ikjj");
        tor.setPaymentAppId("M4MCLOUDDSRP");
        tor.setProvidePaymentAccountReference(false);
        tor.setEnableTransactionIssuerResponseInformation(true);
        tor.setWrappedEncryptionHashAlgorithm("SHA256");
        tor.setDebitCreditIndicator("BOTH");
        return tor;
    }   
    
    private void errorMissingRequiredFieldAssert(ApiException exc) {
        RequestTokenRequestorErrorSchema errorSchema = apiClient.deserializeError(exc);
        assertEquals("312565", errorSchema.getResponseId());
        assertEquals(1, errorSchema.getErrors().size());
        TokenRequestorAssignmentErrors error = errorSchema.getErrors().get(0);
        assertEquals("gggyh27e5A629dA11e3A949aA0800200yyy9ikjj", error.getEntityId());
        assertEquals("INPUT", error.getSource());
        assertEquals("MISSING_REQUIRED_FIELD", error.getReasonCode());
        assertEquals("Missing Required Field - consumerFacingEntityName", error.getDescription());
    }
    
    @Test 
    public void successTest() throws ApiException {
        RequestTokenRequestorRequestSchema request = successBuildRequestSchema();
        RequestTokenRequestorResponseSchema response = sendRequest(request);
        successAssert(response);
    }   
    
    private RequestTokenRequestorRequestSchema successBuildRequestSchema() {
        RequestTokenRequestorRequestSchema request = new RequestTokenRequestorRequestSchema();
        request.setRequestId("321565");
        request.setTokenRequestors(new ArrayList<TokenRequestorsArrayRequest>());
        request.getTokenRequestors().add(successBuildTokenRequestor01());
        return request;
    }
    
    private TokenRequestorsArrayRequest successBuildTokenRequestor01() {
        TokenRequestorsArrayRequest tor = new TokenRequestorsArrayRequest();
        tor.setEntityId("gggyh27e5A629dA11e3A949aA0800200yyy9ikjj");
        tor.setConsumerFacingEntityName("TestMerchant");
        tor.setPaymentAppId("M4MCLOUDDSRP");
        tor.setTokenRequestorPngLogo("");
        tor.setTokenRequestorSvgLogo("PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxMi41NCAyMiI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOiNmZjY3MWI7fS5jbHMtMntmaWxsOiM3MjcyNzE7fTwvc3R5bGU+PC9kZWZzPjx0aXRsZT5pY29uX21vYmlsZV9vcm5nX2FwcGxld2F0Y2g8L3RpdGxlPjxnIGlkPSJMYXllcl8yIiBkYXRhLW5hbWU9IkxheWVyIDIiPjxnIGlkPSJPcmFuZ2UiPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTYuMywxMy44MSw1LDEwLjFsLS45LDEuNDRoLTJ2LTFIMy41OUw1LjI4LDcuOWwxLjQ2LDQuMjRMOC4xLDEwLjkxbDIuMzUtLjA3LDAsMS0yLC4wNlpNOS43LDBIMi44NFY1LjUyaDFWMWg1VjUuNjFoMVptMCwxNi4xNGgtMVYyMWgtNXYtNC44aC0xVjIySDkuN1oiLz48cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik0xMC40MiwxNi42MkgyLjEyQTIuMTIsMi4xMiwwLDAsMSwwLDE0LjV2LTdBMi4xMiwyLjEyLDAsMCwxLDIuMTIsNS4zNWg4LjNhMi4xMiwyLjEyLDAsMCwxLDIuMTIsMi4xMnY3QTIuMTIsMi4xMiwwLDAsMSwxMC40MiwxNi42MlpNMi4xMiw2LjMxQTEuMTcsMS4xNywwLDAsMCwxLDcuNDd2N2ExLjE3LDEuMTcsMCwwLDAsMS4xNywxLjE3aDguM2ExLjE3LDEuMTcsMCwwLDAsMS4xNy0xLjE3di03YTEuMTcsMS4xNywwLDAsMC0xLjE3LTEuMTdaIi8+PC9nPjwvZz48L3N2Zz4=");
        tor.setProvidePaymentAccountReference(false);
        tor.setEnableTransactionIssuerResponseInformation(true);
        tor.setWrappedEncryptionHashAlgorithm("SHA256");
        tor.setDebitCreditIndicator("BOTH");
        return tor;
    }
    
    private void successAssert(RequestTokenRequestorResponseSchema response) {
        assertEquals("321565",response.getResponseId());
    }
    
    @Test 
    public void partialSuccessTest() throws ApiException {
        RequestTokenRequestorRequestSchema request = partialSuccessBuildRequestSchema();
        RequestTokenRequestorResponseSchema response = sendRequest(request);
        partialSuccessAssert(response);
    }   
    
    private RequestTokenRequestorRequestSchema partialSuccessBuildRequestSchema() {
        RequestTokenRequestorRequestSchema request = new RequestTokenRequestorRequestSchema();
        request.setRequestId("901565");
        request.setTokenRequestors(new ArrayList<TokenRequestorsArrayRequest>());
        request.getTokenRequestors().add(partialSuccessBuildTokenRequestor01());
        request.getTokenRequestors().add(partialSuccessBuildTokenRequestor02());
        return request;
    }
    
    private TokenRequestorsArrayRequest partialSuccessBuildTokenRequestor01() {
        TokenRequestorsArrayRequest tor = new TokenRequestorsArrayRequest();
        tor.setEntityId("gggyh27e5A629dA11e3A949aA0800200yyy9ikjj");
        tor.setConsumerFacingEntityName("samplemerchant2");
        tor.setPaymentAppId("M4MCLOUDDSRP");
        tor.setTokenRequestorPngLogo("");
        tor.setTokenRequestorSvgLogo("PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxMi41NCAyMiI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOiNmZjY3MWI7fS5jbHMtMntmaWxsOiM3MjcyNzE7fTwvc3R5bGU+PC9kZWZzPjx0aXRsZT5pY29uX21vYmlsZV9vcm5nX2FwcGxld2F0Y2g8L3RpdGxlPjxnIGlkPSJMYXllcl8yIiBkYXRhLW5hbWU9IkxheWVyIDIiPjxnIGlkPSJPcmFuZ2UiPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTYuMywxMy44MSw1LDEwLjFsLS45LDEuNDRoLTJ2LTFIMy41OUw1LjI4LDcuOWwxLjQ2LDQuMjRMOC4xLDEwLjkxbDIuMzUtLjA3LDAsMS0yLC4wNlpNOS43LDBIMi44NFY1LjUyaDFWMWg1VjUuNjFoMVptMCwxNi4xNGgtMVYyMWgtNXYtNC44aC0xVjIySDkuN1oiLz48cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik0xMC40MiwxNi42MkgyLjEyQTIuMTIsMi4xMiwwLDAsMSwwLDE0LjV2LTdBMi4xMiwyLjEyLDAsMCwxLDIuMTIsNS4zNWg4LjNhMi4xMiwyLjEyLDAsMCwxLDIuMTIsMi4xMnY3QTIuMTIsMi4xMiwwLDAsMSwxMC40MiwxNi42MlpNMi4xMiw2LjMxQTEuMTcsMS4xNywwLDAsMCwxLDcuNDd2N2ExLjE3LDEuMTcsMCwwLDAsMS4xNywxLjE3aDguM2ExLjE3LDEuMTcsMCwwLDAsMS4xNy0xLjE3di03YTEuMTcsMS4xNywwLDAsMC0xLjE3LTEuMTdaIi8+PC9nPjwvZz48L3N2Zz4=");
        tor.setProvidePaymentAccountReference(false);
        tor.setEnableTransactionIssuerResponseInformation(true);
        tor.setWrappedEncryptionHashAlgorithm("SHA256");
        tor.setDebitCreditIndicator("BOTH");
        return tor;
    }
    
    private TokenRequestorsArrayRequest partialSuccessBuildTokenRequestor02() {
        TokenRequestorsArrayRequest tor = new TokenRequestorsArrayRequest();
        tor.setEntityId("gggyh27e5A629dA11e3A949aA0800300yyy9ikjj");
        tor.setConsumerFacingEntityName("samplemerchant");
        tor.setPaymentAppId("M4MCLOUDDSRP");
        tor.setTokenRequestorPngLogo("");
        tor.setTokenRequestorSvgLogo("PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxMi41NCAyMiI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOiNmZjY3MWI7fS5jbHMtMntmaWxsOiM3MjcyNzE7fTwvc3R5bGU+PC9kZWZzPjx0aXRsZT5pY29uX21vYmlsZV9vcm5nX2FwcGxld2F0Y2g8L3RpdGxlPjxnIGlkPSJMYXllcl8yIiBkYXRhLW5hbWU9IkxheWVyIDIiPjxnIGlkPSJPcmFuZ2UiPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTYuMywxMy44MSw1LDEwLjFsLS45LDEuNDRoLTJ2LTFIMy41OUw1LjI4LDcuOWwxLjQ2LDQuMjRMOC4xLDEwLjkxbDIuMzUtLjA3LDAsMS0yLC4wNlpNOS43LDBIMi44NFY1LjUyaDFWMWg1VjUuNjFoMVptMCwxNi4xNGgtMVYyMWgtNXYtNC44aC0xVjIySDkuN1oiLz48cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik0xMC40MiwxNi42MkgyLjEyQTIuMTIsMi4xMiwwLDAsMSwwLDE0LjV2LTdBMi4xMiwyLjEyLDAsMCwxLDIuMTIsNS4zNWg4LjNhMi4xMiwyLjEyLDAsMCwxLDIuMTIsMi4xMnY3QTIuMTIsMi4xMiwwLDAsMSwxMC40MiwxNi42MlpNMi4xMiw2LjMxQTEuMTcsMS4xNywwLDAsMCwxLDcuNDd2N2ExLjE3LDEuMTcsMCwwLDAsMS4xNywxLjE3aDguM2ExLjE3LDEuMTcsMCwwLDAsMS4xNy0xLjE3di03YTEuMTcsMS4xNywwLDAsMC0xLjE3LTEuMTdaIi8+PC9nPjwvZz48L3N2Zz4=");
        tor.setProvidePaymentAccountReference(false);
        tor.setEnableTransactionIssuerResponseInformation(true);
        tor.setWrappedEncryptionHashAlgorithm("SHA256");
        tor.setDebitCreditIndicator("BOTH");
        return tor;
    }
    
    private void partialSuccessAssert(RequestTokenRequestorResponseSchema response) {
        assertEquals("901565",response.getResponseId());
    }
    
    private RequestTokenRequestorResponseSchema sendRequest(RequestTokenRequestorRequestSchema request) throws ApiException {
        BatchRequestTokenRequestorsApi api = new BatchRequestTokenRequestorsApi(apiClient);
        RequestTokenRequestorResponseSchema response = api.tokenRequestorsBatchesPOST(request);
        return response;
    }
 
}