/*
 * Token Requestor ID API
 * An API that allows On-behalf of Token Requestors such as Payment Service Providers to bulk request TRIDs for their merchants.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wallee.sdk.trid.model;

import com.google.gson.annotations.SerializedName;
import java.util.Objects;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * TokenRequestorsArrayUpdate
 */

public class TokenRequestorsArrayUpdate {
  @SerializedName("tokenRequestorId")
  private String tokenRequestorId = null;

  @SerializedName("consumerFacingEntityName")
  private String consumerFacingEntityName = null;

  @SerializedName("tokenRequestorPngLogo")
  private Object tokenRequestorPngLogo = null;

  @SerializedName("tokenRequestorSvgLogo")
  private Object tokenRequestorSvgLogo = null;

  @SerializedName("providePaymentAccountReference")
  private Boolean providePaymentAccountReference = null;

  @SerializedName("wrappedEncryptionHashAlgorithm")
  private String wrappedEncryptionHashAlgorithm = null;

  public TokenRequestorsArrayUpdate tokenRequestorId(String tokenRequestorId) {
    this.tokenRequestorId = tokenRequestorId;
    return this;
  }

   /**
   * __REQUIRED__&lt;br&gt; The Token Requestor Id assigned to the entity. &lt;br&gt;
   * @return tokenRequestorId
  **/
  public String getTokenRequestorId() {
    return tokenRequestorId;
  }

  public void setTokenRequestorId(String tokenRequestorId) {
    this.tokenRequestorId = tokenRequestorId;
  }

  public TokenRequestorsArrayUpdate consumerFacingEntityName(String consumerFacingEntityName) {
    this.consumerFacingEntityName = consumerFacingEntityName;
    return this;
  }

   /**
   * __OPTIONAL__&lt;br&gt; The consumer recognizable nameof the token requestor. This must be unique. Text will be HTML escaped and the length will be validated after. HTML tags will not be escaped and not rendered.
   * @return consumerFacingEntityName
  **/
  public String getConsumerFacingEntityName() {
    return consumerFacingEntityName;
  }

  public void setConsumerFacingEntityName(String consumerFacingEntityName) {
    this.consumerFacingEntityName = consumerFacingEntityName;
  }

  public TokenRequestorsArrayUpdate tokenRequestorPngLogo(Object tokenRequestorPngLogo) {
    this.tokenRequestorPngLogo = tokenRequestorPngLogo;
    return this;
  }

   /**
   * __OPTIONAL__&lt;br&gt; The logo of the token requestor in a PNG format. The base64 encoded binary of the image. The dimensions must be 192 X 192 pixels. If the Token Requestor logo isn&#39;t originally square, it must be centered on a white square. Must also be accompanied by tokenRequestorSvgLogo.
   * @return tokenRequestorPngLogo
  **/
  public Object getTokenRequestorPngLogo() {
    return tokenRequestorPngLogo;
  }

  public void setTokenRequestorPngLogo(Object tokenRequestorPngLogo) {
    this.tokenRequestorPngLogo = tokenRequestorPngLogo;
  }

  public TokenRequestorsArrayUpdate tokenRequestorSvgLogo(Object tokenRequestorSvgLogo) {
    this.tokenRequestorSvgLogo = tokenRequestorSvgLogo;
    return this;
  }

   /**
   * __OPTIONAL__&lt;br&gt; The logo of the token requestor in a PNG format. The base64 encoded binary of the image. The dimensions must be square. If the Token Requestor logo isn&#39;t originally square, it must be centered on a white square. Must also be accompanied by tokenRequestorPngLogo.&lt;br&gt;__OPTIONAL__
   * @return tokenRequestorSvgLogo
  **/
  public Object getTokenRequestorSvgLogo() {
    return tokenRequestorSvgLogo;
  }

  public void setTokenRequestorSvgLogo(Object tokenRequestorSvgLogo) {
    this.tokenRequestorSvgLogo = tokenRequestorSvgLogo;
  }

  public TokenRequestorsArrayUpdate providePaymentAccountReference(Boolean providePaymentAccountReference) {
    this.providePaymentAccountReference = providePaymentAccountReference;
    return this;
  }

   /**
   * __OPTIONAL__&lt;br&gt; Indicator if MDES should return the Payment Account Reference in the response to the Tokenize API. See MDES Digital Enablement API documentation. A payload encryption certificate will have to be configured for MDES to return the PAR. Must be one of,   * &#39;true&#39; - MDES should return the PAR.   * &#39;false&#39; - MDES should not return the PAR.
   * @return providePaymentAccountReference
  **/
  public Boolean getProvidePaymentAccountReference() {
    return providePaymentAccountReference;
  }

  public void setProvidePaymentAccountReference(Boolean providePaymentAccountReference) {
    this.providePaymentAccountReference = providePaymentAccountReference;
  }

  public TokenRequestorsArrayUpdate wrappedEncryptionHashAlgorithm(String wrappedEncryptionHashAlgorithm) {
    this.wrappedEncryptionHashAlgorithm = wrappedEncryptionHashAlgorithm;
    return this;
  }

   /**
   * __OPTIONAL__&lt;br&gt; Hashing algorithm used with the OEAP scheme. If omitted, then the RSA Encryption Standard PKCS &#39;#1 v1.5&#39; will be used. Must be one of, * SHA256 - Use the SHA-256 algorithm. * SHA512 - Use the SHA-512 algorithm. * NONE - PKCS &#39;#1 v1.5&#39;
   * @return wrappedEncryptionHashAlgorithm
  **/
  public String getWrappedEncryptionHashAlgorithm() {
    return wrappedEncryptionHashAlgorithm;
  }

  public void setWrappedEncryptionHashAlgorithm(String wrappedEncryptionHashAlgorithm) {
    this.wrappedEncryptionHashAlgorithm = wrappedEncryptionHashAlgorithm;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenRequestorsArrayUpdate tokenRequestorsArrayUpdate = (TokenRequestorsArrayUpdate) o;
    return Objects.equals(this.tokenRequestorId, tokenRequestorsArrayUpdate.tokenRequestorId) &&
        Objects.equals(this.consumerFacingEntityName, tokenRequestorsArrayUpdate.consumerFacingEntityName) &&
        Objects.equals(this.tokenRequestorPngLogo, tokenRequestorsArrayUpdate.tokenRequestorPngLogo) &&
        Objects.equals(this.tokenRequestorSvgLogo, tokenRequestorsArrayUpdate.tokenRequestorSvgLogo) &&
        Objects.equals(this.providePaymentAccountReference, tokenRequestorsArrayUpdate.providePaymentAccountReference) &&
        Objects.equals(this.wrappedEncryptionHashAlgorithm, tokenRequestorsArrayUpdate.wrappedEncryptionHashAlgorithm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenRequestorId, consumerFacingEntityName, tokenRequestorPngLogo, tokenRequestorSvgLogo, providePaymentAccountReference, wrappedEncryptionHashAlgorithm);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenRequestorsArrayUpdate {\n");
    
    sb.append("    tokenRequestorId: ").append(toIndentedString(tokenRequestorId)).append("\n");
    sb.append("    consumerFacingEntityName: ").append(toIndentedString(consumerFacingEntityName)).append("\n");
    sb.append("    tokenRequestorPngLogo: ").append(toIndentedString(tokenRequestorPngLogo)).append("\n");
    sb.append("    tokenRequestorSvgLogo: ").append(toIndentedString(tokenRequestorSvgLogo)).append("\n");
    sb.append("    providePaymentAccountReference: ").append(toIndentedString(providePaymentAccountReference)).append("\n");
    sb.append("    wrappedEncryptionHashAlgorithm: ").append(toIndentedString(wrappedEncryptionHashAlgorithm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

