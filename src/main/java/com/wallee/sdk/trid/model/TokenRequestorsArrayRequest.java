/*
 * Token Requestor ID API
 * An API that allows On-behalf of Token Requestors such as Payment Service Providers to bulk request TRIDs for their merchants.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wallee.sdk.trid.model;

import com.google.gson.annotations.SerializedName;
import java.util.Objects;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * TokenRequestorsArrayRequest
 */

public class TokenRequestorsArrayRequest {
  @SerializedName("entityId")
  private String entityId = null;

  @SerializedName("paymentAppId")
  private String paymentAppId = null;

  @SerializedName("consumerFacingEntityName")
  private String consumerFacingEntityName = null;

  @SerializedName("debitCreditIndicator")
  private String debitCreditIndicator = null;

  @SerializedName("tokenRequestorPngLogo")
  private Object tokenRequestorPngLogo = null;

  @SerializedName("tokenRequestorSvgLogo")
  private Object tokenRequestorSvgLogo = null;

  @SerializedName("providePaymentAccountReference")
  private Boolean providePaymentAccountReference = null;

  @SerializedName("enableTransactionIssuerResponseInformation")
  private Boolean enableTransactionIssuerResponseInformation = null;

  @SerializedName("wrappedEncryptionHashAlgorithm")
  private String wrappedEncryptionHashAlgorithm = null;

  public TokenRequestorsArrayRequest entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

   /**
   * __REQUIRED__&lt;br&gt; Identifier for the entity for whom a Token Requestor ID was requested. Only alpha-numeric characters [a-zA-Z0-9].
   * @return entityId
  **/
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }

  public TokenRequestorsArrayRequest paymentAppId(String paymentAppId) {
    this.paymentAppId = paymentAppId;
    return this;
  }

   /**
   * __REQUIRED__&lt;br&gt; Identifier for the Payment App, unique per app as assigned by Mastercard for this Payment App. For M4M token requestors this value is &#39;M4MCLOUDDSRP&#39;
   * @return paymentAppId
  **/
  public String getPaymentAppId() {
    return paymentAppId;
  }

  public void setPaymentAppId(String paymentAppId) {
    this.paymentAppId = paymentAppId;
  }

  public TokenRequestorsArrayRequest consumerFacingEntityName(String consumerFacingEntityName) {
    this.consumerFacingEntityName = consumerFacingEntityName;
    return this;
  }

   /**
   * __REQUIRED__&lt;br&gt; The consumer recognizable nameof the token requestor. This must be unique. Text will be HTML escaped and the length will be validated after. HTML tags will not be escaped and not rendered.
   * @return consumerFacingEntityName
  **/
  public String getConsumerFacingEntityName() {
    return consumerFacingEntityName;
  }

  public void setConsumerFacingEntityName(String consumerFacingEntityName) {
    this.consumerFacingEntityName = consumerFacingEntityName;
  }

  public TokenRequestorsArrayRequest debitCreditIndicator(String debitCreditIndicator) {
    this.debitCreditIndicator = debitCreditIndicator;
    return this;
  }

   /**
   * __REQUIRED__&lt;br&gt; Indication if the token requestor supports debit cards, credit cards or both. Must be one of,  * CREDIT - Credit cards are supported.  * DEBIT - Debit cards are supported.  * BOTH - Credit and Debit cards are supported.
   * @return debitCreditIndicator
  **/
  public String getDebitCreditIndicator() {
    return debitCreditIndicator;
  }

  public void setDebitCreditIndicator(String debitCreditIndicator) {
    this.debitCreditIndicator = debitCreditIndicator;
  }

  public TokenRequestorsArrayRequest tokenRequestorPngLogo(Object tokenRequestorPngLogo) {
    this.tokenRequestorPngLogo = tokenRequestorPngLogo;
    return this;
  }

   /**
   * __OPTIONAL__&lt;br&gt; The logo of the token requestor in a PNG format. The base64 encoded binary of the image. The dimensions must be 192 X 192 pixels. If the Token Requestor logo isn&#39;t originally square, it must be centered on a white square. Must also be accompanied by tokenRequestorSvgLogo.
   * @return tokenRequestorPngLogo
  **/
  public Object getTokenRequestorPngLogo() {
    return tokenRequestorPngLogo;
  }

  public void setTokenRequestorPngLogo(Object tokenRequestorPngLogo) {
    this.tokenRequestorPngLogo = tokenRequestorPngLogo;
  }

  public TokenRequestorsArrayRequest tokenRequestorSvgLogo(Object tokenRequestorSvgLogo) {
    this.tokenRequestorSvgLogo = tokenRequestorSvgLogo;
    return this;
  }

   /**
   * __OPTIONAL__&lt;br&gt; The logo of the token requestor in a PNG format. The base64 encoded binary of the image. The dimensions must be square. If the Token Requestor logo isn&#39;t originally square, it must be centered on a white square. Must also be accompanied by tokenRequestorPngLogo.
   * @return tokenRequestorSvgLogo
  **/
  public Object getTokenRequestorSvgLogo() {
    return tokenRequestorSvgLogo;
  }

  public void setTokenRequestorSvgLogo(Object tokenRequestorSvgLogo) {
    this.tokenRequestorSvgLogo = tokenRequestorSvgLogo;
  }

  public TokenRequestorsArrayRequest providePaymentAccountReference(Boolean providePaymentAccountReference) {
    this.providePaymentAccountReference = providePaymentAccountReference;
    return this;
  }

   /**
   * __REQUIRED__&lt;br&gt; Indicator if MDES should return the Payment Account Reference in the response to the Tokenize API. See MDES Digital Enablement API documentation. A payload encryption certificate will have to be configured for MDES to return the PAR.  Must be one of,   * &#39;true&#39; - MDES should return the PAR.   * &#39;false&#39; - MDES should not return the PAR.
   * @return providePaymentAccountReference
  **/
  public Boolean getProvidePaymentAccountReference() {
    return providePaymentAccountReference;
  }

  public void setProvidePaymentAccountReference(Boolean providePaymentAccountReference) {
    this.providePaymentAccountReference = providePaymentAccountReference;
  }

  public TokenRequestorsArrayRequest enableTransactionIssuerResponseInformation(Boolean enableTransactionIssuerResponseInformation) {
    this.enableTransactionIssuerResponseInformation = enableTransactionIssuerResponseInformation;
    return this;
  }

   /**
   * __REQUIRED__&lt;br&gt; Indicator if the MDES should return additional issuer information for declined transactions in TransactionDetails. See MDES Digital Enablement API documentation. Must be one of,   * &#39;true&#39; - MDES should return the details.   * &#39;false&#39; - MDES should not return the details.
   * @return enableTransactionIssuerResponseInformation
  **/
  public Boolean getEnableTransactionIssuerResponseInformation() {
    return enableTransactionIssuerResponseInformation;
  }

  public void setEnableTransactionIssuerResponseInformation(Boolean enableTransactionIssuerResponseInformation) {
    this.enableTransactionIssuerResponseInformation = enableTransactionIssuerResponseInformation;
  }

  public TokenRequestorsArrayRequest wrappedEncryptionHashAlgorithm(String wrappedEncryptionHashAlgorithm) {
    this.wrappedEncryptionHashAlgorithm = wrappedEncryptionHashAlgorithm;
    return this;
  }

   /**
   * __OPTIONAL__&lt;br&gt; Hashing algorithm used with the OEAP scheme. If omitted, then the RSA Encryption Standard PKCS &#39;#1 v1.5&#39; will be used. Must be one of, * SHA256 - Use the SHA-256 algorithm. * SHA512 - Use the SHA-512 algorithm. * NONE - PKCS &#39;#1 v1.5&#39;
   * @return wrappedEncryptionHashAlgorithm
  **/
  public String getWrappedEncryptionHashAlgorithm() {
    return wrappedEncryptionHashAlgorithm;
  }

  public void setWrappedEncryptionHashAlgorithm(String wrappedEncryptionHashAlgorithm) {
    this.wrappedEncryptionHashAlgorithm = wrappedEncryptionHashAlgorithm;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenRequestorsArrayRequest tokenRequestorsArrayRequest = (TokenRequestorsArrayRequest) o;
    return Objects.equals(this.entityId, tokenRequestorsArrayRequest.entityId) &&
        Objects.equals(this.paymentAppId, tokenRequestorsArrayRequest.paymentAppId) &&
        Objects.equals(this.consumerFacingEntityName, tokenRequestorsArrayRequest.consumerFacingEntityName) &&
        Objects.equals(this.debitCreditIndicator, tokenRequestorsArrayRequest.debitCreditIndicator) &&
        Objects.equals(this.tokenRequestorPngLogo, tokenRequestorsArrayRequest.tokenRequestorPngLogo) &&
        Objects.equals(this.tokenRequestorSvgLogo, tokenRequestorsArrayRequest.tokenRequestorSvgLogo) &&
        Objects.equals(this.providePaymentAccountReference, tokenRequestorsArrayRequest.providePaymentAccountReference) &&
        Objects.equals(this.enableTransactionIssuerResponseInformation, tokenRequestorsArrayRequest.enableTransactionIssuerResponseInformation) &&
        Objects.equals(this.wrappedEncryptionHashAlgorithm, tokenRequestorsArrayRequest.wrappedEncryptionHashAlgorithm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityId, paymentAppId, consumerFacingEntityName, debitCreditIndicator, tokenRequestorPngLogo, tokenRequestorSvgLogo, providePaymentAccountReference, enableTransactionIssuerResponseInformation, wrappedEncryptionHashAlgorithm);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenRequestorsArrayRequest {\n");
    
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    paymentAppId: ").append(toIndentedString(paymentAppId)).append("\n");
    sb.append("    consumerFacingEntityName: ").append(toIndentedString(consumerFacingEntityName)).append("\n");
    sb.append("    debitCreditIndicator: ").append(toIndentedString(debitCreditIndicator)).append("\n");
    sb.append("    tokenRequestorPngLogo: ").append(toIndentedString(tokenRequestorPngLogo)).append("\n");
    sb.append("    tokenRequestorSvgLogo: ").append(toIndentedString(tokenRequestorSvgLogo)).append("\n");
    sb.append("    providePaymentAccountReference: ").append(toIndentedString(providePaymentAccountReference)).append("\n");
    sb.append("    enableTransactionIssuerResponseInformation: ").append(toIndentedString(enableTransactionIssuerResponseInformation)).append("\n");
    sb.append("    wrappedEncryptionHashAlgorithm: ").append(toIndentedString(wrappedEncryptionHashAlgorithm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

